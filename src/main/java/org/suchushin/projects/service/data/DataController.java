package org.suchushin.projects.service.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;

@Service
@Transactional
public class DataController {

    @Autowired
    UserDAO userDAO;

    @Autowired
    EntityManager entityManager;

    public boolean insertUser(String login, String password, String role, Boolean enabled){
        User user = new User(login, password, role, enabled);
        boolean success = true;

        try {
            userDAO.save(user);
        } catch (Exception e){
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public boolean deleteUser(String login){
        boolean success = true;

        try {
            userDAO.deleteByLogin(login);
        } catch (Exception e){
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public User retrieveUser(String login){
        return userDAO.findByLogin(login);
    }

    public boolean createCalendarForNewUser(String login){
        boolean success = true;

        try {
            entityManager.createNativeQuery("CREATE TABLE calendar_of_" + login +
                    " (id INTEGER GENERATED BY DEFAULT AS IDENTITY, " +
                    "event_name VARCHAR(50) NOT NULL, " +
                    "event_description VARCHAR(255) DEFAULT '', " +
                    "event_date DATE NOT NULL, " +
                    "PRIMARY KEY(id));").executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public boolean deleteUserCalendar(String login){
        boolean success = true;

        try {
            entityManager.createNativeQuery("DROP TABLE calendar_of_" + login + ";").executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public boolean insertEvent(String login, String eventName, String eventDescription, String eventDate){
        boolean success = true;

        try {
            entityManager.createNativeQuery("INSERT INTO calendar_of_" + login +
                    " VALUES (DEFAULT, '" + eventName + "', '" + eventDescription  + "', '" + eventDate + "');").executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public boolean deleteEvent(String login, String eventName, String eventDescription, String eventDate){
        boolean success = true;
        String query = "DELETE FROM calendar_of_" + login;

        if (eventName != null || eventDescription != null || eventDate != null) {
            query += " WHERE ";
            if (eventName != null)
                query += "event_name = '" + eventName + "' ";
            if (eventDescription != null)
                query += "AND ";
            if (eventDescription != null)
                query += "event_description = '" + eventDescription + "' ";
            if (eventDate != null)
                query += "AND ";
            if (eventDate != null)
                query += "event_date = '" + eventDate + "'";
            query += ";";
        } else {
            return false;
        }


        try {
            entityManager.createNativeQuery(query).executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
            success = false;
        }

        return success;
    }

    public List<Event> retrieveCalendarEvents(String login){
        List eventNameList = null;
        List eventDescriptionList = null;
        List eventDateList = null;
        List<Event> entries = new ArrayList<Event>();

        try {
            eventNameList = entityManager.createNativeQuery("SELECT event_name FROM calendar_of_" + login + ";").getResultList();
            eventDescriptionList = entityManager.createNativeQuery("SELECT event_description FROM calendar_of_" + login + ";").getResultList();
            eventDateList = entityManager.createNativeQuery("SELECT event_date FROM calendar_of_" + login + ";").getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (eventNameList != null && eventDescriptionList != null && eventDateList != null){
            for (int i = 0; i < eventNameList.size(); i++){
                entries.add(new Event((String) eventNameList.get(i), (String) eventDescriptionList.get(i), eventDateList.get(i).toString()));
            }
        }

        return entries;
    }

    public List<Event> retrieveCalendarEventsByDate(String login, String eventDate){
        List eventNameList = null;
        List eventDescriptionList = null;
        List eventDateList = null;
        List<Event> entries = new ArrayList<Event>();

        try {
            eventNameList = entityManager.createNativeQuery("SELECT event_name FROM calendar_of_" + login + " WHERE event_date = " + eventDate + ";").getResultList();
            eventDescriptionList = entityManager.createNativeQuery("SELECT event_description FROM calendar_of_" + login + " WHERE event_date = " + eventDate + ";").getResultList();
            eventDateList = entityManager.createNativeQuery("SELECT event_date FROM calendar_of_" + login + " WHERE event_date = " + eventDate + ";").getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (eventNameList != null && eventDescriptionList != null && eventDateList != null){
            for (int i = 0; i < eventDateList.size(); i++){
                entries.add(new Event((String) eventNameList.get(i), (String) eventDescriptionList.get(i), eventDateList.get(i).toString()));
            }
        }

        return entries;
    }

    public List<Event> retrieveCalendarEventsByName(String login, String eventName){
        List eventNameList = null;
        List eventDescriptionList = null;
        List eventDateList = null;
        List<Event> entries = new ArrayList<>();

        try {
            eventNameList = entityManager.createNativeQuery("SELECT event_name FROM calendar_of_" + login + " WHERE event_name = " + eventName + ";").getResultList();
            eventDescriptionList = entityManager.createNativeQuery("SELECT event_description FROM calendar_of_" + login + " WHERE event_name = " + eventName + ";").getResultList();
            eventDateList = entityManager.createNativeQuery("SELECT event_date FROM calendar_of_" + login + " WHERE event_name = " + eventName + ";").getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (eventNameList != null && eventDescriptionList != null && eventDateList != null){
            for (int i = 0; i < eventNameList.size(); i++){
                entries.add(new Event((String) eventNameList.get(i), (String) eventDescriptionList.get(i), eventDateList.get(i).toString()));
            }
        }

        return entries;
    }
}
